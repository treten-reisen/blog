---
import * as dateFns from "date-fns"

import BlocksRenderer from "../../components/BlocksRenderer.astro"
import Comments from "../../components/Comments.astro"
import LazyImage from "../../components/lazy-image"
import NavBar from "../../components/NavBar.astro"
import Seo from "../../components/Seo.astro"
import { getArticle } from "../../data/get-article"
import { getArticleList, StrapiArticleListItem } from "../../data/get-article-list"
import { getGlobal } from "../../data/get-global"
import { dateFnsLocale } from "../../date-format"
import { encodeImageToBlurhashURL } from "../../helpers/blurhash"
import Layout from "../../layouts/Layout.astro"

export async function getStaticPaths() {
  const articles = await getArticleList({ includeUnlisted: true })

  return articles.data.map(article => ({
    params: { slug: article.attributes.slug },
    props: { article },
  }))
}

export type Props = {
  article: StrapiArticleListItem
}

const {
  article: { id },
} = Astro.props as Props
const global = await getGlobal()
const article = await getArticle(id)

const blurhash = await encodeImageToBlurhashURL(article.data.attributes.image.xl)
---

<Layout disableIndexing={!article.data.attributes.listed}>
  <Fragment slot="head">
    <Seo type="article" global={global.data} seo={article.data.attributes.seo} />
  </Fragment>
  {
    article.data.attributes.image && (
      <Fragment slot="header">
        <NavBar logoUrl={global.data.attributes.logo.data.attributes.url} />
        <header class="h-hero relative flex w-full items-end">
          <div class="absolute h-full w-full">
            <LazyImage
              blurhashConfig={blurhash}
              src={article.data.attributes.image.xl.htmlImage.src || undefined}
              alt={article.data.attributes.image.xl.htmlImage.src || undefined}
              loading="eager"
              client:idle
            />
          </div>
          <div class="absolute bottom-0 h-full w-full bg-gradient-to-t from-gray-900 md:to-60%" />
          <div class="sm:py-responsive md:py-responsive z-10 p-6 md:container md:px-8">
            {article.data.attributes.listed && article.data.attributes.publishedAt && (
              <time class="text-gray-200" datetime={dateFns.format(article.data.attributes.publishedAt, "yyyy-MM-dd")}>
                {dateFns.formatRelative(article.data.attributes.publishedAt, new Date(), { locale: dateFnsLocale })}
              </time>
            )}
            <h1 class="text-4xl font-extrabold text-gray-50 sm:text-5xl" set:html={article.data.attributes.title} />
          </div>
        </header>
      </Fragment>
    )
  }
  <div class="flex min-w-0 flex-col items-start gap-responsive md:flex-row">
    <article class="flex h-full max-w-prose flex-col font-serif">
      <div class="mb-responsive flex-1">
        <BlocksRenderer blocks={article.data.attributes.blocks} />
        <div class="mt-6 flex max-w-prose justify-end">
          <span class="font-sans text-gray-500">
            {
              article.data.attributes.publishedAt &&
                (article.data.attributes.publishedAt.toDateString() ===
                article.data.attributes.updatedAt.toDateString() ? (
                  <time datetime={dateFns.format(article.data.attributes.publishedAt, "yyyy-MM-dd")}>
                    {dateFns.intlFormat(
                      article.data.attributes.publishedAt,
                      { year: "numeric", month: "long", day: "numeric" },
                      { locale: "de" }
                    )}
                  </time>
                ) : (
                  <Fragment>
                    aktualisiert am{" "}
                    <time datetime={dateFns.format(article.data.attributes.updatedAt, "yyyy-MM-dd")}>
                      {`${dateFns.intlFormat(
                        article.data.attributes.updatedAt,
                        { year: "numeric", month: "long", day: "numeric" },
                        { locale: "de" }
                      )}`}
                    </time>
                  </Fragment>
                ))
            }
          </span>
        </div>
      </div>
    </article>
    <!-- {
      article.data.attributes.listed && (
        <aside class="sticky bottom-8 right-8 ml-6 mt-2 self-end rounded-full border border-gray-200 bg-gray-50 p-3 md:bottom-auto md:top-24 md:self-start md:rounded-none md:border-none md:bg-gray-100 md:p-4 ">
          <LikeButton articleId={article.data.id} client:only="react" />
        </aside>
      )
    } -->
  </div>
  {
    article.data.attributes.listed && (
      <div class="mt-responsive font-serif">
        <div class="font-sans">
          <Comments
            url={new URL(`/articles/${article.data.attributes.slug}`, Astro.site).toString()}
            identifier={`treten-reisen.article.${article.data.id}`}
            title={article.data.attributes.seo.metaTitle || "treten.reisen"}
          />
        </div>
      </div>
    )
  }
</Layout>
